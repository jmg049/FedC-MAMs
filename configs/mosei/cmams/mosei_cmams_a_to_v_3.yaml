experiment:
  name: "MOSEI (CMAMs A-V): Baseline Training"
  debug: False
  run_id: 3

data:
  train:
    dataset: "mosei"
    data_fp: "DATA/MOSEI/aligned_50.pkl"
    target_modality: "multimodal"
    split: "train"
    shuffle: True
    drop_last: True
    pin_memory: True


  validation:
    dataset: "mosei"
    data_fp: "DATA/MOSEI/aligned_50.pkl"
    target_modality: "multimodal"
    split: "valid"
    drop_last: True
    pin_memory: True


  test:
    dataset: "mosei"
    data_fp: "DATA/MOSEI/aligned_50.pkl"
    target_modality: "multimodal"
    split: "test"
    drop_last: True
    pin_memory: True

model:
  name: "UttFusionModel"
  pretrained_path: "experiments/mosei/models/MOSEI (Classification): Baseline Training/3/mosei_model_UAR_AVL_best.pth"
  kwargs:
    input_size_a: 74
    embd_size_a: 96
    embd_method_a: "maxpool"
    input_size_v: 35
    embd_size_v: 96
    embd_method_v: "maxpool"
    input_size_l: 768
    embd_size_l: 96
    classification_layers: [96, 96]
    output_dim: 3
    dropout: 0.5
    use_bn: False

cmam:
  name: "BasicCMAM"
  input_encoder_info:
    A_feat:
      name: "LSTMEncoder"
      input_size: 74
      hidden_size: 96
      embd_method: "maxpool"
  target_modality: "V_feat"
  kwargs:
    assoc_net_input_size: 96
    assoc_net_hidden_size: 256
    assoc_net_output_size: 96
    assoc_dropout: 0.4
    assoc_use_bn: True 
    grad_clip: 0.5

cmam_training:
  epochs: 25
  num_modalities: 3
  batch_size: 256
  optimizer: "adam"
  optim_kwargs:
    weight_decay: 0.0001
    lr: 0.001
    betas: [0.9, 0.999]
  rec_criterion: "cmam"
  rec_criterion_kwargs:
    cosine_weight: 1.0
    mse_weight: 1.0
    mae_weight: 1.0
  cls_criterion: "cross_entropy"
  cls_weight: 0.05
  target_missing_type: "azz"
  scheduler: "lambda"
  scheduler_args:
    lr_lambda: "lambda epoch: 1.0 - max(0, epoch + epoch_count - niter) / float(niter_decay + 1)"
    epoch_count: 1
    niter: 10
    niter_decay: 10
  do_tsne: True
  
logging:
  save_metric: "loss"
  log_path: "experiments/mosei/logs/{experiment_name}/{run_id}/"
  model_output_path: "experiments/mosei/models/{experiment_name}/cmam_A_to_V_{save_metric}_{run_id}.pth" 
  metrics_paths: "experiments/mosei/metrics/{experiment_name}/{run_id}/cmam_A_to_V"

metrics:
  prediction_metrics:
    Accuracy:
      function: "sklearn.metrics.accuracy_score"
    F1_Micro:
      function: "sklearn.metrics.f1_score"
      kwargs:
        average: "micro"
    F1_Macro:
      function: "sklearn.metrics.f1_score"
      kwargs:
        average: "macro"
    F1_Weighted:
      function: "sklearn.metrics.f1_score"
      kwargs:
        average: "weighted"
    UAR:
      function: "sklearn.metrics.recall_score"
      kwargs:
        average: "macro"
        zero_division: 0
    Precision_Macro:
      function: "sklearn.metrics.precision_score"
      kwargs:
        average: "macro"
        zero_division: 0
    Recall_Macro:
      function: "sklearn.metrics.recall_score"
      kwargs:
        average: "macro"
        zero_division: 0
    Precision_Weighted:
      function: "sklearn.metrics.precision_score"
      kwargs:
        average: "weighted"
        zero_division: 0
    Recall_Weighted:
      function: "sklearn.metrics.recall_score"
      kwargs:
        average: "weighted"
        zero_division: 0
    Precision_Micro:
      function: "sklearn.metrics.precision_score"
      kwargs:
        average: "micro"
        zero_division: 0
    Recall_Micro:
      function: "sklearn.metrics.recall_score"
      kwargs:
        average: "micro"
        zero_division: 0
    NonZeroAcc:
      function: metrics.mosi.binary_accuracy_non_zero
    NonZeroF1:
      function: metrics.mosi.binary_f1_score_non_zero
    HasZeroAcc:
      function: metrics.mosi.binary_accuracy
    HasZeroF1:
      function: metrics.mosi.binary_f1_score
    ConfusionMatrix:
      function: sklearn.metrics.confusion_matrix
      kwargs:
        labels: [0, 1, 2]
  rec_metrics:
    MAE:
      function: "sklearn.metrics.mean_absolute_error"
    MSE:
      function: "sklearn.metrics.mean_squared_error"
    CosineSimilarity:
      function: "metrics.similarity.cosine_similarity"

    

